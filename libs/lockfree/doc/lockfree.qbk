[library Boost.Lockfree
    [quickbook 1.4]
    [authors [Blechmann, Tim]]
    [copyright 2008-2010 Tim Blechmann]
    [category algorithms]
    [purpose
        lockfree concurrent data structures
    ]
    [id lockfree]
    [dirname lockfree]
    [license
        Distributed under the Boost Software License, Version 1.0.
        (See accompanying file LICENSE_1_0.txt or copy at
        [@http://www.boost.org/LICENSE_1_0.txt])
    ]
]

[c++]


[/  Images   ]

[def _note_                         [$images/note.png]]
[def _alert_                        [$images/caution.png]]
[def _detail_                       [$images/note.png]]
[def _tip_                          [$images/tip.png]]

[/  Links   ]

[def _lockfree_                      [^boost.lockfree]]

[/  unspecified stuff   ]
[def __unspecified_int__ /unspecified-int-type/]
[def __unspecified_bool__ /unspecified-bool-type/]

[section:disclaimer Disclaimer]
_lockfree_ is NOT a boost library!
[endsect]

[section Introduction]

[h2 What is _lockfree_?]

_lockfree_ provides implementations of lock-free data structures. Lock-free data structures can be accessed by multiple
threads without the necessity of blocking synchronization primitives such as guards. Lock-free data structures can be
used in real-time systems, where blocking algorithms may lead to high worst-case execution times, to avoid priority
inversion, or to increase the scalability for multi-processor machines.

The following data structures are provided:

* [classref boost::lockfree::fifo], a lock-free fifo queue
* [classref boost::lockfree::stack], a lock-free stack
* [classref boost::lockfree::ringbuffer], a lock-free single-producer/single-consumer ringbuffer

[endsect]


[section Examples]

[h2 Fifo]

The [classref boost::lockfree::fifo boost::lockfree::fifo] class implements a multi-writer/multi-reader fifo queue. The
following example shows how integer values are produced and consumed by 2 threads each:

``
#include <boost/thread/thread.hpp>
#include <boost/atomic.hpp>
#include <boost/lockfree/fifo.hpp>
#include <iostream>

boost::atomic_int producer_count(0);
boost::atomic_int consumer_count(0);

boost::lockfree::fifo<int> fifo;

const int iterations = 10000000;
const int producer_thread_count = 4;
const int consumer_thread_count = 4;

void producer(void)
{
    for (int i = 0; i != iterations; ++i) {
        int value = ++producer_count;
        fifo.enqueue(value);
    }
}

volatile bool done = false;
void consumer(void)
{
    int value;
    while (!done) {
        while (fifo.dequeue(&value))
            ++consumer_count;
    }

    while (fifo.dequeue(&value))
        ++consumer_count;
}

int main(int argc, char* argv[])
{
    using namespace std;
    cout << "boost::lockfree::fifo is ";
    if (!fifo.is_lock_free())
        cout << "not ";
    cout << "lockfree" << endl;

    boost::thread_group producer_threads, consumer_threads;

    for (int i = 0; i != producer_thread_count; ++i)
        producer_threads.create_thread(producer);

    for (int i = 0; i != consumer_thread_count; ++i)
        consumer_threads.create_thread(consumer);

    producer_threads.join_all();
    done = true;

    consumer_threads.join_all();

    cout << "produced " << producer_count << " objects." << endl;
    cout << "consumed " << consumer_count << " objects." << endl;
}
``

The program output is:

[pre
produced 40000000 objects.
consumed 40000000 objects.
]


[h2 Stack]

The [classref boost::lockfree::stack boost::lockfree::stack] class implements a multi-writer/multi-reader stack. The
following example shows how integer values are produced and consumed by 2 threads each:

``
#include <boost/thread/thread.hpp>
#include <boost/atomic.hpp>
#include <boost/lockfree/stack.hpp>
#include <iostream>

boost::atomic_int producer_count(0);
boost::atomic_int consumer_count(0);

boost::lockfree::stack<int> stack;

const int iterations = 1000000;
const int producer_thread_count = 4;
const int consumer_thread_count = 4;

void producer(void)
{
    for (int i = 0; i != iterations; ++i) {
        int value = ++producer_count;
        stack.push(value);
    }
}

volatile bool done = false;

void consumer(void)
{
    int value;
    while (!done) {
        while (stack.pop(&value))
            ++consumer_count;
    }

    while (stack.pop(&value))
        ++consumer_count;
}

int main(int argc, char* argv[])
{
    using namespace std;
    cout << "boost::lockfree::stack is ";
    if (!stack.is_lock_free())
        cout << "not ";
    cout << "lockfree" << endl;

    boost::thread_group producer_threads, consumer_threads;

    for (int i = 0; i != producer_thread_count; ++i)
        producer_threads.create_thread(producer);

    for (int i = 0; i != consumer_thread_count; ++i)
        consumer_threads.create_thread(consumer);

    producer_threads.join_all();
    done = true;

    consumer_threads.join_all();

    cout << "produced " << producer_count << " objects." << endl;
    cout << "consumed " << consumer_count << " objects." << endl;
}
``
The program output is:

[pre
produced 4000000 objects.
consumed 4000000 objects.
]


[endsect]


[section Reference]

[section boost::lockfree::fifo]

[classref boost::lockfree::fifo boost::lockfree::fifo] provides a multi-writer/multi-reader lockfree fifo class,
enqueueing and dequeueing is lockfree, construction/destruction has to be synchronized. A specialized [classref
boost::lockfree::fifo fifo] class for pointer-arguments is provided, which supports dequeueing to stl/boost-style smart
pointers. Its used type argument is limited to PODs.

It uses a freelist for memory management, freed nodes are pushed to the freelist, but not returned to the os. This may
result in leaking memory.

[section Synopsis]

[c++]


``
namespace boost {
namespace lockfree {

template <typename T, typename freelist_t = caching_freelist_t, typename Alloc = std::allocator<T> >
class fifo:
    boost::noncopyable
{
public:
    fifo(void);
    explicit fifo(std::size_t initial_nodes);
    ~fifo(void);

    bool is_lock_free(void) const;
    bool empty(void) const;

    bool enqueue(T const & t);
    bool dequeue(T * ret);
};

template <typename T, typename freelist_t = caching_freelist_t, typename Alloc = std::allocator<T> >
class fifo<T*>:
    boost::noncopyable
{
public:
    fifo(void);
    explicit fifo(std::size_t initial_nodes);
    ~fifo(void);

    bool is_lock_free(void) const;
    bool empty(void) const;

    bool enqueue(T * t);

    bool dequeue (T ** ret);
    bool dequeue (std::auto_ptr<T> & ret);
    bool dequeue (boost::scoped_ptr<T> & ret);
    bool dequeue (boost::shared_ptr<T> & ret);
};

} /* namespace lockfree */
} /* namespace boost */
``

[endsect]

[section Members]

[heading Constructors]

    fifo(void);

Default Constructor

    explicit fifo(std::size_t initial_nodes);

Construct fifo with a number of initially allocated fifo nodes.

[heading Destructor]

    ~fifo(void);

Destroys stored nodes and fifo, free all nodes from freelist.

[warning Not thread-safe, no enqueue/dequeue operation is allowed, when the destructor is running]

[heading Lockfree Property]

    bool is_lock_free(void) const;

Returns: true, if fifo implementation is lock-free.

[warning It only checks, if the fifo head node is lockfree. on most platforms, this should be sufficient, though]


[heading Empty]

    bool empty(void) const;

Returns: true, if fifo is empty.

[warning Not thread-safe, use for debugging purposes only]


[heading Enqueue]

    bool enqueue(T const & t);

Enqueues object t to the fifo. Enqueueing may fail, if the freelist is not able to allocate a new fifo node.

Returns: true, if the enqueue operation is successful.

[note Thread-safe and non-blocking]
[important May block if node needs to be allocated from the operating system]

[heading Dequeue]

    bool dequeue (T * ret);

Dequeue object from fifo.

Returns: true, if the dequeue operation is successful, false if fifo was empty.

Effect: if dequeue operation is successful, object is written to memory location denoted by ret.

[note Thread-safe and non-blocking]

    bool dequeue (std::auto_ptr<T> & ret);
    bool dequeue (boost::scoped_ptr<T> & ret);
    bool dequeue (boost::shared_ptr<T> & ret);

The specialized class for pointer objects provides an api for dequeuing objects directly to smart pointers.

[endsect]

[section Memory Management]

The memory management of the fifo can be controlled via its `freelist_t` template argument. Two different freelists can
be used. `struct caching_freelist_t` selects a caching freelist, which can allocate more nodes from the operating
system, and `struct static_freelist_t` uses a fixed-sized freelist. With a fixed-sized freelist, the enqueue operation
may fail, while with a caching freelist, the enqueue operation may block.

[endsect]


[endsect]

[section boost::lockfree::stack]

[classref boost::lockfree::stack boost::lockfree::stack] provides a multi-writer/multi-reader lockfree stack class,
push and pop is lockfree, construction/destruction has to be synchronized.

It uses a caching freelist for memory management, freed nodes are pushed to the freelist. This may result in leaking
memory.

[section Synopsis]

[c++]


``
namespace boost {
namespace lockfree {

template <typename T, typename Alloc = std::allocator<T> >
class stack:
    boost::noncopyable
{
public:
    stack(void);
    explicit stack(std::size_t n);

    bool is_lock_free(void) const;
    bool empty(void) const;

    bool push(T const & v);
    bool pop(T * ret);
};

} /* namespace lockfree */
} /* namespace boost */
``

[endsect]

[section Members]

[heading Constructors]

    stack(void);

Default Constructor

    explicit stack(std::size_t initial_nodes);

Construct stack with a number of initially allocated stack nodes.


[heading Destructor]

    ~stack(void);

Destroys stack, free all nodes from freelist.


[heading Lockfree Property]

    bool is_lock_free(void) const;

Returns: true, if fifo implementation is lock-free.

[warning It only checks, if the fifo head node is lockfree. on most platforms, this should be sufficient, though]


[heading Empty]

    bool empty(void) const;

Returns: true, if stack is empty.

[warning Not thread-safe, use for debugging purposes only]


[heading Push]

    bool push(T const & t);

Pushes object t to the stack. Pushing may fail, if the freelist is not able to allocate a new stack node.

[note Thread-safe and non-blocking]
[important May block, if node needs to be allocated from the operating system]

[heading Pop]

    bool pop (T * ret);

Pop object from stack.

Returns: true, if the pop operation is successful, false if stack was empty.
Effect: if pop operation is successful, object is written to memory location denoted by ret.

[note Thread-safe and non-blocking]

[endsect]

[section Memory Management]

The memory management of the stack can be controlled via its `freelist_t` template argument. Two different freelists can
be used. `struct caching_freelist_t` selects a caching freelist, which can allocate more nodes from the operating
system, and `struct static_freelist_t` uses a fixed-sized freelist. With a fixed-sized freelist, the push operation
may fail, while with a caching freelist, the push operation may block.

[endsect]

[endsect]

[section boost::lockfree::ringbuffer]

[classref boost::lockfree::ringbuffer boost::lockfree::ringbuffer] provides a single-writer/single-reader lockfree ringbuffer
class. If more than one thread is used for enqueueing or dequeuing, additional locking has to be done. The ringbuffer size can
be set at compile-time by setting the max_size template argument. If max_size is 0, the buffer size can be set at run-time.

[section Synopsis]

[c++]

``
namespace boost {
namespace lockfree {

template <typename T, size_t max_size>
class ringbuffer
{
public:
    bool enqueue(T const & t);
    bool dequeue(T * ret);

    size_t enqueue(T const * t, size_t size);
    size_t dequeue(T * ret, size_t size);
};

template <typename T>
class ringbuffer<T, 0>:
    public detail::ringbuffer_internal<T>
{
public:
    ringbuffer(size_t max_size);

    bool enqueue(T const & t);
    bool dequeue(T * ret);

    size_t enqueue(T const * t, size_t size);
    size_t dequeue(T * ret, size_t size);
};


} /* namespace lockfree */
} /* namespace boost */
``

[endsect]

[section Members]

[heading Constructors]

    ringbuffer(void);

Default Constructor, for static sized ringbuffer.

    explicit fifo(std::size_t max_size);

Construct ringbuffer with a buffer of max_size elements.

[heading Lockfree Property]

    bool is_lock_free(void) const;

Returns: true, if ringbuffer implementation is lock-free.

[heading Empty]

    bool empty(void) const;

Returns: true, if ringbuffer is empty.

[warning Not thread-safe, use for debugging purposes only]


[heading Enqueue]

    bool enqueue(T const & t);

Enqueues object t to the ringbuffer. Enqueueing may fail, if the ringbuffer is full.

Returns: true, if the enqueue operation is successful.


    size_t enqueue(T const * t, size_t size)

Enqueues size objects from the array t to the ringbuffer. Enqueueing may fail, if the ringbuffer is full.

Returns: number of enqueued items

[note Thread-safe and non-blocking]

[heading Dequeue]

    bool dequeue (T * ret);

Dequeue object from ringbuffer.

Returns: true, if the dequeue operation is successful, false if ringbuffer was empty.

Effect: if dequeue operation is successful, object is written to memory location denoted by ret.

    size_t dequeue(T * ret, size_t size)

Dequeue a maximum of size objects from ringbuffer.

Returns: number of dequeued items

Effect: if dequeue operation is successful, object is written to memory location denoted by ret.


[note Thread-safe and non-blocking]

[endsect]


[endsect]


[endsect]

[/

[section Building blocks]
The _lockfree_ library provides several building blocks, used in lockfree algorithms.


[section tagged_ptr]

Tagged pointer implementation as smart pointer class, as it is required by several lockfree algorithms.

[section Synposis]
``
namespace boost
{
namespace lockfree
{

template <class T>
class tagged_ptr
{
public:
    typedef __unspecified_int__ tag_t;

    tagged_ptr(void);
    tagged_ptr(tagged_ptr const & p);
    explicit tagged_ptr(T * p, tag_t t = 0);

    void operator= (tagged_ptr const & p);
    void atomic_set(tagged_ptr const & p);
    void atomic_set(T * p, tag_t t);

    void set(tagged_ptr const & p);
    void set(T * p, tag_t t);

    bool operator== (tagged_ptr const & p) const;
    bool operator!= (tagged_ptr const & p) const;

    T * get_ptr() const;
    void set_ptr(T * p);

    tag_t get_tag() const;
    void set_tag(tag_t t);

    bool cas(tagged_ptr const & oldval, T * newptr);
    bool cas(tagged_ptr const & oldval, T * newptr, tag_t t);

    T & operator*() const;
    T * operator->() const;

    operator __unspecified_bool__(void) const;
};

} /* namespace lockfree */
} /* namespace boost */

``
[endsect]

[section Members]

[heading tag_t]

    typedef __unspecified_int__ tag_t;

Type of ABA-prevention tag

[heading Constructors]

    tagged_ptr(void);

Uninitialized constructor

    tagged_ptr(tagged_ptr const & p);

Copy Constructor

    explicit tagged_ptr(T * p, tag_t t = 0);

Construct tagged_ptr from pointer and tag


[heading Atomically Set]

    void operator= (tagged_ptr const & p);
    void atomic_set(tagged_ptr const & p);

Atomically set from tagged_ptr.

    void atomic_set(T * p, tag_t t);

Atomically set from pointer and tag

[heading Set]
    void set(tagged_ptr const & p);

Set from tagged_ptr

    void set(T * p, tag_t t);

Set from pointer and tag

[heading Comparison]
    bool operator== (tagged_ptr const & p) const;
    bool operator!= (tagged_ptr const & p) const;

Returns: (get_ptr() == p.get_ptr()) && (get_tag() == p.get_tag())

[heading Pointer access]

    T * get_ptr() const;

Get pointer

    void set_ptr(T * p);

Set pointer


[heading Tag access]

    tag_t get_tag() const;

Get tag

    void set_tag(tag_t t);

Set tag

[heading Compare-And-Swap]

    bool cas(tagged_ptr const & oldval, T * newptr);

if (*this == oldval) {
    this->set(newptr, oldval.get_tag() + 1);
    return true;
}
else
    return false;

    bool cas(tagged_ptr const & oldval, T * newptr, tag_t t);

if (*this == oldval) {
    this->set(newptr, t);
    return true;
}
else
    return false;

[heading Indirection]
    T & operator*() const;

Returns: reference to object, undefined if get_ptr() == 0

    T * operator->() const;

Returns: pointer to object

[heading Conversion]

    operator __unspecified_bool__(void) const;

Returns: get_ptr() != 0


[endsect]

[endsect]

[section Freelists]

[section Freelist Concept]

``
template <typename T, typename Alloc = std::allocator<T> >
concept freelist
{
public:
    freelist(void);
    explicit freelist(std::size_t initial_nodes);
    ~freelist(void);

    T * allocate (void);
    void deallocate (T * n);
};
``

[endsect]


[section Members]


[heading Constructors]

    freelist(void);

Default Constructor

    explicit freelist(std::size_t initial_nodes);

Construct freelist, allocate a number of initial nodes


[heading Destructor]

    ~freelist(void);

Free all nodes from the freelist to the OS


[heading Allocation]

    T * allocate (void);

Allocate memory for one object.


[heading Deallocation]

    void deallocate (T * n);

Deallocate object to freelist

[endsect]

[section Freelist Implementations]

    template <typename T, typename Alloc = std::allocator<T> >
    class caching_freelist;

Caching freelist class. Uses an internal lockfree stack to cache objects. Deallocation never frees objects.

    template <typename T, std::size_t max_size = 64,
              typename Alloc = std::allocator<T> >
    class freelist;

Freelist class, with a maximum size of max_size. Uses an lockfree stack to cache max_size objects.

[endsect]
[endsect]
[endsect]

]


[section Portability]

Most data structures of _lockfree_ are written to use of Compare-And-Swap instructions. In order to implement the
tagged_ptr, CAS instructions are required, that can operate on one pointer and one integer type. For non-supported
platforms, a blocking emulation of the atomic instructions is provided. _lockfree_ relies on the boost.atomic library
for providing low-level primitives.

[endsect]

[section Acknowledgements]

Thanks for suggestions, porting, testing:

* Thomas Grill, original win32/osx code pieces
* Shiwei Xu, api suggestions
* Stefan Eilemann, bug fixes
* Mignon Belongie, bug fix
* Anthony Williams, found fifo race condition
* Casey McCandless, msvc/icc fixes
* Mark Bulas, msvc/x64 fixes
* Anteru, api/documentation suggestions
* Helge Bahmann, boost.lockfree library

[endsect]

[section References]

# Maged M. Michael and Michael L. Scott. Simple, Fast, and Practical Non-Blocking and Blocking Concurrent Queue Algorithms.
In Symposium on Principles of Distributed Computing, pages 267–275, 1996.
# M. Herlihy, V. Luchangco, P. Martin, and M. Moir. Nonblocking memory management support for dynamic-sized data
structures. ACM Transactions on Computer Systems (TOCS), 23(2):146–196, 2005.


[endsect]


[section Todo]

# Compare-And-Swap instructions return the old value, one can make use of this in order to avoid an additional memory
access (suggested by Cory Nelson).
# Adapt algorithms to be lockfree on architectures with load-linked/store-conditional instructions.

[endsect]
